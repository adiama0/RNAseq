CONDITION = ['CTLrep1','KOrep1','CTLrep2','KOrep2','CTLrep3','KOrep3']
READ = ['R1','R2']
samples = expand('{CONDITION}_{READ}', CONDITION = CONDITION, READ = READ)

rule all:
	input: 
		expand('results/flagstat/{CONDITION}_flagstat.txt', CONDITION = CONDITION),
		'results/multiqc_report.html',
		'results/filtered_matrix.csv'

rule get_h38:
	output:
		'results/GRCh38.primary_assembly.genome.fa.gz'
	params:
		outdir = 'results/'
	shell:
		'''
		wget -P {params.outdir} -O {output}  https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_45/GRCh38.primary_assembly.genome.fa.gz
        '''

rule get_h38_gtf:
	output: 
		'results/gencode.v45.primary_assembly.annotation.gtf.gz'
	params:
		outdir = 'results/'
	shell:
		'''
		wget -P {params.outdir} -O {output} https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_45/gencode.v45.primary_assembly.annotation.gtf.gz
        '''

rule unzip_h38_gtf:
	input:
		fasta_gz = 'results/GRCh38.primary_assembly.genome.fa.gz',
		gtf_gz = 'results/gencode.v45.primary_assembly.annotation.gtf.gz'
	output:
		fasta = 'results/GRCh38.primary_assembly.genome.fa',
		gtf = 'results/gencode.v45.primary_assembly.annotation.gtf'
	shell:
		'''
		gunzip -k {input.fasta_gz} {input.gtf_gz}
		'''

rule fastqc:
	input:
		fastq = 'samples/{samples}.fastq.gz'
	output: 
		fastqc = 'results/fastqc/{samples}_fastqc.html'
	conda: 
		'envs/fastqc_env.yml'
	params:
		outdir = 'results/fastqc/'
	shell: 
		'''
		fastqc {input.fastq} --outdir {params.outdir}
		'''

rule multiqc:
	input:
	    fastqc = expand('results/fastqc/{samples}_fastqc.html', samples = samples)
	output:
	    multiqc = 'results/multiqc_report.html'
	conda: 
		'envs/multiqc_env.yml'
	params:
	    outdir = 'results/'
	shell:
		'''
		multiqc {params.outdir} --outdir {params.outdir}
		'''

rule star_genome:
	input:
		gtf = 'results/gencode.v45.primary_assembly.annotation.gtf',
		fasta = 'results/GRCh38.primary_assembly.genome.fa'
	output:
		'results/h38_star/chrLength.txt'
	conda:
		'envs/star_env.yml'
	params:
		genomedir = 'results/h38_star/'
	shell:
		'''
		STAR --runThreadN 1 \
			 --runMode genomeGenerate \
			 --genomeDir {params.genomedir} \
		 	 --genomeFastaFiles {input.fasta} \
		 	 --sjdbGTFfile {input.gtf} \
		 	 --sjdbOverhang 99
		'''

rule star_align: 
	input: 
		R1 = 'samples/{CONDITION}_R1.fastq.gz',
		R2 = 'samples/{CONDITION}_R2.fastq.gz',
		star_file = 'results/h38_star/chrLength.txt'
	output: 
		bam = 'results/star/star_{CONDITION}Aligned.out.bam'
	conda:
		'envs/star_env.yml'
	params:
		outdir = 'results/star/star_{CONDITION}',
		star_dir = 'results/h38_star/'
	threads: 12
	shell:
		'''
		STAR --runMode alignReads \
			 --runThreadN {threads} \
			 -- outSAMtype BAM Unsorted \
			 -- genomeDir {params.star_dir} \
			 --readFilesCommand gunzip -c \
			 --readFilesIn {input.R1} {input.R2} \
			 --outFileNamePrefix {params.outdir} 
		'''

rule flagstat:
	input:
		bam = 'results/star/star_{CONDITION}Aligned.out.bam'
	output:
		txt = 'results/flagstat/{CONDITION}_flagstat.txt'
	conda:
		'envs/samtools_env.yml'
	shell:
		'''
		samtools flagstat {input.bam} > {output.txt}
		'''

rule verse: 
	input: 
		bam = 'results/star/star_{CONDITION}Aligned.out.bam',
		gtf = 'results/gencode.v45.primary_assembly.annotation.gtf'
	output:
		'results/verse/{CONDITION}.exon.txt'
	conda:
		'envs/verse_env.yml'
	params:
		verse = 'results/verse/{CONDITION}'
	shell:
		'''
		verse -S -a {input.gtf} -o {params.verse} {input.bam}
		'''

rule concat_filter:
	input:
		verse_files = expand('results/verse/{CONDITION}.exon.txt', CONDITION=CONDITION)
	output:
		flt_matrix = 'results/filtered_matrix.csv'
	params:
		cts_matrix = 'results/count_matrix.csv'
	shell:
		'''
		python concatenate_filter.py -i {input.verse_files} -o {output.flt_matrix} -t {params.cts_matrix}
		'''
